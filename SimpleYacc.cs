// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  KALSLAPTOP
// DateTime: 28.11.2022 11:25:48
// UserName: kalsa
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,WHILE=5,LOOP=6,
    IF=7,ASSIGN=8,SEMICOLON=9,PLUS=10,MINUS=11,MULT=12,
    DIV=13,PRINT=14,LPAREN=15,RPAREN=16,COLUMN=17,MORE=18,
    LESS=19,EQ=20,NEQ=21,AND=22,OR=23,INUM=24,
    RNUM=25,BNUM=26,ID=27,FUN=28};

public struct ValueType
{ 
			public int iVal;
			public double dVal; 
			public bool bVal;
			public string sVal;
			public object oVal;
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public RunTimeValue rtv;
			public ExprList exl;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public BlockNode root; // Корневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[44];
  private static State[] states = new State[78];
  private static string[] nonTerms = new string[] {
      "expr", "exprlist", "exprlistnull", "ident", "Q", "S", "P", "T", "F", "func", 
      "assign", "statement", "loop", "while", "if", "print", "stlist", "block", 
      "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-19,1,-18,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{27,24,3,4,6,57,5,61,7,67,14,73},new int[]{-17,5,-12,77,-11,9,-4,10,-18,55,-13,56,-14,60,-15,66,-16,72});
    states[5] = new State(new int[]{4,6,9,7});
    states[6] = new State(-39);
    states[7] = new State(new int[]{27,24,3,4,6,57,5,61,7,67,14,73},new int[]{-12,8,-11,9,-4,10,-18,55,-13,56,-14,60,-15,66,-16,72});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{8,11});
    states[11] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-1,12,-5,49,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[12] = new State(new int[]{22,13,23,36,4,-12,9,-12});
    states[13] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-5,14,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[14] = new State(new int[]{20,15,21,38,22,-18,23,-18,4,-18,9,-18,17,-18,16,-18,27,-18,3,-18,6,-18,5,-18,7,-18,14,-18});
    states[15] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-6,16,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[16] = new State(new int[]{18,17,19,40,20,-21,21,-21,22,-21,23,-21,4,-21,9,-21,17,-21,16,-21,27,-21,3,-21,6,-21,5,-21,7,-21,14,-21});
    states[17] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-7,18,-8,52,-9,53,-4,23,-10,28});
    states[18] = new State(new int[]{10,19,11,42,18,-24,19,-24,20,-24,21,-24,22,-24,23,-24,4,-24,9,-24,17,-24,16,-24,27,-24,3,-24,6,-24,5,-24,7,-24,14,-24});
    states[19] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-8,20,-9,53,-4,23,-10,28});
    states[20] = new State(new int[]{12,21,13,44,10,-27,11,-27,18,-27,19,-27,20,-27,21,-27,22,-27,23,-27,4,-27,9,-27,17,-27,16,-27,27,-27,3,-27,6,-27,5,-27,7,-27,14,-27});
    states[21] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-9,22,-4,23,-10,28});
    states[22] = new State(-30);
    states[23] = new State(-33);
    states[24] = new State(-11);
    states[25] = new State(-34);
    states[26] = new State(-35);
    states[27] = new State(-36);
    states[28] = new State(-37);
    states[29] = new State(new int[]{15,30});
    states[30] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46,16,-17},new int[]{-3,31,-2,33,-1,54,-5,49,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[31] = new State(new int[]{16,32});
    states[32] = new State(-13);
    states[33] = new State(new int[]{17,34,16,-16});
    states[34] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-1,35,-5,49,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[35] = new State(new int[]{22,13,23,36,17,-15,16,-15});
    states[36] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-5,37,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[37] = new State(new int[]{20,15,21,38,22,-19,23,-19,4,-19,9,-19,17,-19,16,-19,27,-19,3,-19,6,-19,5,-19,7,-19,14,-19});
    states[38] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-6,39,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[39] = new State(new int[]{18,17,19,40,20,-22,21,-22,22,-22,23,-22,4,-22,9,-22,17,-22,16,-22,27,-22,3,-22,6,-22,5,-22,7,-22,14,-22});
    states[40] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-7,41,-8,52,-9,53,-4,23,-10,28});
    states[41] = new State(new int[]{10,19,11,42,18,-25,19,-25,20,-25,21,-25,22,-25,23,-25,4,-25,9,-25,17,-25,16,-25,27,-25,3,-25,6,-25,5,-25,7,-25,14,-25});
    states[42] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-8,43,-9,53,-4,23,-10,28});
    states[43] = new State(new int[]{12,21,13,44,10,-28,11,-28,18,-28,19,-28,20,-28,21,-28,22,-28,23,-28,4,-28,9,-28,17,-28,16,-28,27,-28,3,-28,6,-28,5,-28,7,-28,14,-28});
    states[44] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-9,45,-4,23,-10,28});
    states[45] = new State(-31);
    states[46] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-1,47,-5,49,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[47] = new State(new int[]{16,48,22,13,23,36});
    states[48] = new State(-38);
    states[49] = new State(new int[]{20,15,21,38,22,-20,23,-20,4,-20,9,-20,17,-20,16,-20,27,-20,3,-20,6,-20,5,-20,7,-20,14,-20});
    states[50] = new State(new int[]{18,17,19,40,20,-23,21,-23,22,-23,23,-23,4,-23,9,-23,17,-23,16,-23,27,-23,3,-23,6,-23,5,-23,7,-23,14,-23});
    states[51] = new State(new int[]{10,19,11,42,18,-26,19,-26,20,-26,21,-26,22,-26,23,-26,4,-26,9,-26,17,-26,16,-26,27,-26,3,-26,6,-26,5,-26,7,-26,14,-26});
    states[52] = new State(new int[]{12,21,13,44,10,-29,11,-29,18,-29,19,-29,20,-29,21,-29,22,-29,23,-29,4,-29,9,-29,17,-29,16,-29,27,-29,3,-29,6,-29,5,-29,7,-29,14,-29});
    states[53] = new State(-32);
    states[54] = new State(new int[]{22,13,23,36,17,-14,16,-14});
    states[55] = new State(-6);
    states[56] = new State(-7);
    states[57] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-1,58,-5,49,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[58] = new State(new int[]{22,13,23,36,27,24,3,4,6,57,5,61,7,67,14,73},new int[]{-12,59,-11,9,-4,10,-18,55,-13,56,-14,60,-15,66,-16,72});
    states[59] = new State(-40);
    states[60] = new State(-8);
    states[61] = new State(new int[]{15,62});
    states[62] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-1,63,-5,49,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[63] = new State(new int[]{16,64,22,13,23,36});
    states[64] = new State(new int[]{27,24,3,4,6,57,5,61,7,67,14,73},new int[]{-12,65,-11,9,-4,10,-18,55,-13,56,-14,60,-15,66,-16,72});
    states[65] = new State(-41);
    states[66] = new State(-9);
    states[67] = new State(new int[]{15,68});
    states[68] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-1,69,-5,49,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[69] = new State(new int[]{16,70,22,13,23,36});
    states[70] = new State(new int[]{27,24,3,4,6,57,5,61,7,67,14,73},new int[]{-12,71,-11,9,-4,10,-18,55,-13,56,-14,60,-15,66,-16,72});
    states[71] = new State(-42);
    states[72] = new State(-10);
    states[73] = new State(new int[]{15,74});
    states[74] = new State(new int[]{27,24,24,25,25,26,26,27,28,29,15,46},new int[]{-1,75,-5,49,-6,50,-7,51,-8,52,-9,53,-4,23,-10,28});
    states[75] = new State(new int[]{16,76,22,13,23,36});
    states[76] = new State(-43);
    states[77] = new State(-3);

    rules[1] = new Rule(-20, new int[]{-19,2});
    rules[2] = new Rule(-19, new int[]{-18});
    rules[3] = new Rule(-17, new int[]{-12});
    rules[4] = new Rule(-17, new int[]{-17,9,-12});
    rules[5] = new Rule(-12, new int[]{-11});
    rules[6] = new Rule(-12, new int[]{-18});
    rules[7] = new Rule(-12, new int[]{-13});
    rules[8] = new Rule(-12, new int[]{-14});
    rules[9] = new Rule(-12, new int[]{-15});
    rules[10] = new Rule(-12, new int[]{-16});
    rules[11] = new Rule(-4, new int[]{27});
    rules[12] = new Rule(-11, new int[]{-4,8,-1});
    rules[13] = new Rule(-10, new int[]{28,15,-3,16});
    rules[14] = new Rule(-2, new int[]{-1});
    rules[15] = new Rule(-2, new int[]{-2,17,-1});
    rules[16] = new Rule(-3, new int[]{-2});
    rules[17] = new Rule(-3, new int[]{});
    rules[18] = new Rule(-1, new int[]{-1,22,-5});
    rules[19] = new Rule(-1, new int[]{-1,23,-5});
    rules[20] = new Rule(-1, new int[]{-5});
    rules[21] = new Rule(-5, new int[]{-5,20,-6});
    rules[22] = new Rule(-5, new int[]{-5,21,-6});
    rules[23] = new Rule(-5, new int[]{-6});
    rules[24] = new Rule(-6, new int[]{-6,18,-7});
    rules[25] = new Rule(-6, new int[]{-6,19,-7});
    rules[26] = new Rule(-6, new int[]{-7});
    rules[27] = new Rule(-7, new int[]{-7,10,-8});
    rules[28] = new Rule(-7, new int[]{-7,11,-8});
    rules[29] = new Rule(-7, new int[]{-8});
    rules[30] = new Rule(-8, new int[]{-8,12,-9});
    rules[31] = new Rule(-8, new int[]{-8,13,-9});
    rules[32] = new Rule(-8, new int[]{-9});
    rules[33] = new Rule(-9, new int[]{-4});
    rules[34] = new Rule(-9, new int[]{24});
    rules[35] = new Rule(-9, new int[]{25});
    rules[36] = new Rule(-9, new int[]{26});
    rules[37] = new Rule(-9, new int[]{-10});
    rules[38] = new Rule(-9, new int[]{15,-1,16});
    rules[39] = new Rule(-18, new int[]{3,-17,4});
    rules[40] = new Rule(-13, new int[]{6,-1,-12});
    rules[41] = new Rule(-14, new int[]{5,15,-1,16,-12});
    rules[42] = new Rule(-15, new int[]{7,15,-1,16,-12});
    rules[43] = new Rule(-16, new int[]{14,15,-1,16});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal,CurrentLocationSpan); 
			}
        break;
      case 4: // stlist -> stlist, SEMICOLON, statement
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 5: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 7: // statement -> loop
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 9: // statement -> if
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 10: // statement -> print
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 11: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal,CurrentLocationSpan); }
        break;
      case 12: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal,CurrentLocationSpan); }
        break;
      case 13: // func -> FUN, LPAREN, exprlistnull, RPAREN
{ CurrentSemanticValue.eVal = new FuncNode(ValueStack[ValueStack.Depth-4].oVal, ValueStack[ValueStack.Depth-2].exl,CurrentLocationSpan); }
        break;
      case 14: // exprlist -> expr
{ CurrentSemanticValue.exl = new ExprList(); CurrentSemanticValue.exl.Add(ValueStack[ValueStack.Depth-1].eVal);}
        break;
      case 15: // exprlist -> exprlist, COLUMN, expr
{ CurrentSemanticValue.exl = ValueStack[ValueStack.Depth-3].exl; ValueStack[ValueStack.Depth-3].exl.Add(ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 18: // expr -> expr, AND, Q
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'&',CurrentLocationSpan); }
        break;
      case 19: // expr -> expr, OR, Q
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'|',CurrentLocationSpan); }
        break;
      case 20: // expr -> Q
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 21: // Q -> Q, EQ, S
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'=',CurrentLocationSpan); }
        break;
      case 22: // Q -> Q, NEQ, S
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'!',CurrentLocationSpan); }
        break;
      case 23: // Q -> S
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 24: // S -> S, MORE, P
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'>',CurrentLocationSpan); }
        break;
      case 25: // S -> S, LESS, P
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'<',CurrentLocationSpan); }
        break;
      case 26: // S -> P
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 27: // P -> P, PLUS, T
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'+',CurrentLocationSpan); }
        break;
      case 28: // P -> P, MINUS, T
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'-',CurrentLocationSpan); }
        break;
      case 29: // P -> T
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 30: // T -> T, MULT, F
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'*',CurrentLocationSpan); }
        break;
      case 31: // T -> T, DIV, F
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal,ValueStack[ValueStack.Depth-1].eVal,'/',CurrentLocationSpan); }
        break;
      case 32: // T -> F
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 33: // F -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 34: // F -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal,CurrentLocationSpan); }
        break;
      case 35: // F -> RNUM
{ CurrentSemanticValue.eVal = new RealNumNode(ValueStack[ValueStack.Depth-1].dVal,CurrentLocationSpan); }
        break;
      case 36: // F -> BNUM
{ CurrentSemanticValue.eVal = new BoolNumNode(ValueStack[ValueStack.Depth-1].bVal,CurrentLocationSpan); }
        break;
      case 37: // F -> func
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as FuncNode; }
        break;
      case 38: // F -> LPAREN, expr, RPAREN
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal; }
        break;
      case 39: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 40: // loop -> LOOP, expr, statement
{ CurrentSemanticValue.stVal = new LoopNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal,CurrentLocationSpan);}
        break;
      case 41: // while -> WHILE, LPAREN, expr, RPAREN, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal,CurrentLocationSpan); }
        break;
      case 42: // if -> IF, LPAREN, expr, RPAREN, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal,CurrentLocationSpan);}
        break;
      case 43: // print -> PRINT, LPAREN, expr, RPAREN
{ CurrentSemanticValue.stVal = new PrintNode(ValueStack[ValueStack.Depth-2].eVal,CurrentLocationSpan); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
